// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `transaction.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct RawTransaction {
    // message fields
    pub sender_account: ::std::vec::Vec<u8>,
    pub sequence_number: u64,
    pub max_gas_amount: u64,
    pub gas_unit_price: u64,
    pub expiration_time: u64,
    // message oneof groups
    pub payload: ::std::option::Option<RawTransaction_oneof_payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RawTransaction {
    fn default() -> &'a RawTransaction {
        <RawTransaction as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RawTransaction_oneof_payload {
    program(Program),
    write_set(WriteSet),
}

impl RawTransaction {
    pub fn new() -> RawTransaction {
        ::std::default::Default::default()
    }

    // bytes sender_account = 1;


    pub fn get_sender_account(&self) -> &[u8] {
        &self.sender_account
    }
    pub fn clear_sender_account(&mut self) {
        self.sender_account.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_account(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_account(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender_account
    }

    // Take field
    pub fn take_sender_account(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender_account, ::std::vec::Vec::new())
    }

    // uint64 sequence_number = 2;


    pub fn get_sequence_number(&self) -> u64 {
        self.sequence_number
    }
    pub fn clear_sequence_number(&mut self) {
        self.sequence_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence_number(&mut self, v: u64) {
        self.sequence_number = v;
    }

    // .types.Program program = 3;


    pub fn get_program(&self) -> &Program {
        match self.payload {
            ::std::option::Option::Some(RawTransaction_oneof_payload::program(ref v)) => v,
            _ => Program::default_instance(),
        }
    }
    pub fn clear_program(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_program(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(RawTransaction_oneof_payload::program(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_program(&mut self, v: Program) {
        self.payload = ::std::option::Option::Some(RawTransaction_oneof_payload::program(v))
    }

    // Mutable pointer to the field.
    pub fn mut_program(&mut self) -> &mut Program {
        if let ::std::option::Option::Some(RawTransaction_oneof_payload::program(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(RawTransaction_oneof_payload::program(Program::new()));
        }
        match self.payload {
            ::std::option::Option::Some(RawTransaction_oneof_payload::program(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_program(&mut self) -> Program {
        if self.has_program() {
            match self.payload.take() {
                ::std::option::Option::Some(RawTransaction_oneof_payload::program(v)) => v,
                _ => panic!(),
            }
        } else {
            Program::new()
        }
    }

    // .types.WriteSet write_set = 4;


    pub fn get_write_set(&self) -> &WriteSet {
        match self.payload {
            ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(ref v)) => v,
            _ => WriteSet::default_instance(),
        }
    }
    pub fn clear_write_set(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_write_set(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_write_set(&mut self, v: WriteSet) {
        self.payload = ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(v))
    }

    // Mutable pointer to the field.
    pub fn mut_write_set(&mut self) -> &mut WriteSet {
        if let ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(WriteSet::new()));
        }
        match self.payload {
            ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_write_set(&mut self) -> WriteSet {
        if self.has_write_set() {
            match self.payload.take() {
                ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteSet::new()
        }
    }

    // uint64 max_gas_amount = 5;


    pub fn get_max_gas_amount(&self) -> u64 {
        self.max_gas_amount
    }
    pub fn clear_max_gas_amount(&mut self) {
        self.max_gas_amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_gas_amount(&mut self, v: u64) {
        self.max_gas_amount = v;
    }

    // uint64 gas_unit_price = 6;


    pub fn get_gas_unit_price(&self) -> u64 {
        self.gas_unit_price
    }
    pub fn clear_gas_unit_price(&mut self) {
        self.gas_unit_price = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_unit_price(&mut self, v: u64) {
        self.gas_unit_price = v;
    }

    // uint64 expiration_time = 7;


    pub fn get_expiration_time(&self) -> u64 {
        self.expiration_time
    }
    pub fn clear_expiration_time(&mut self) {
        self.expiration_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiration_time(&mut self, v: u64) {
        self.expiration_time = v;
    }
}

impl ::protobuf::Message for RawTransaction {
    fn is_initialized(&self) -> bool {
        if let Some(RawTransaction_oneof_payload::program(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RawTransaction_oneof_payload::write_set(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender_account)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence_number = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(RawTransaction_oneof_payload::program(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(RawTransaction_oneof_payload::write_set(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_gas_amount = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_unit_price = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.expiration_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender_account.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender_account);
        }
        if self.sequence_number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sequence_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_gas_amount != 0 {
            my_size += ::protobuf::rt::value_size(5, self.max_gas_amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gas_unit_price != 0 {
            my_size += ::protobuf::rt::value_size(6, self.gas_unit_price, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expiration_time != 0 {
            my_size += ::protobuf::rt::value_size(7, self.expiration_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &RawTransaction_oneof_payload::program(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RawTransaction_oneof_payload::write_set(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.sender_account.is_empty() {
            os.write_bytes(1, &self.sender_account)?;
        }
        if self.sequence_number != 0 {
            os.write_uint64(2, self.sequence_number)?;
        }
        if self.max_gas_amount != 0 {
            os.write_uint64(5, self.max_gas_amount)?;
        }
        if self.gas_unit_price != 0 {
            os.write_uint64(6, self.gas_unit_price)?;
        }
        if self.expiration_time != 0 {
            os.write_uint64(7, self.expiration_time)?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &RawTransaction_oneof_payload::program(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RawTransaction_oneof_payload::write_set(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RawTransaction {
        RawTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sender_account",
                    |m: &RawTransaction| { &m.sender_account },
                    |m: &mut RawTransaction| { &mut m.sender_account },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sequence_number",
                    |m: &RawTransaction| { &m.sequence_number },
                    |m: &mut RawTransaction| { &mut m.sequence_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Program>(
                    "program",
                    RawTransaction::has_program,
                    RawTransaction::get_program,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteSet>(
                    "write_set",
                    RawTransaction::has_write_set,
                    RawTransaction::get_write_set,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "max_gas_amount",
                    |m: &RawTransaction| { &m.max_gas_amount },
                    |m: &mut RawTransaction| { &mut m.max_gas_amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_unit_price",
                    |m: &RawTransaction| { &m.gas_unit_price },
                    |m: &mut RawTransaction| { &mut m.gas_unit_price },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "expiration_time",
                    |m: &RawTransaction| { &m.expiration_time },
                    |m: &mut RawTransaction| { &mut m.expiration_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RawTransaction>(
                    "RawTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RawTransaction {
        static mut instance: ::protobuf::lazy::Lazy<RawTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RawTransaction,
        };
        unsafe {
            instance.get(RawTransaction::new)
        }
    }
}

impl ::protobuf::Clear for RawTransaction {
    fn clear(&mut self) {
        self.sender_account.clear();
        self.sequence_number = 0;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.max_gas_amount = 0;
        self.gas_unit_price = 0;
        self.expiration_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RawTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Program {
    // message fields
    pub code: ::std::vec::Vec<u8>,
    pub arguments: ::protobuf::RepeatedField<TransactionArgument>,
    pub modules: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Program {
    fn default() -> &'a Program {
        <Program as ::protobuf::Message>::default_instance()
    }
}

impl Program {
    pub fn new() -> Program {
        ::std::default::Default::default()
    }

    // bytes code = 1;


    pub fn get_code(&self) -> &[u8] {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.code, ::std::vec::Vec::new())
    }

    // repeated .types.TransactionArgument arguments = 2;


    pub fn get_arguments(&self) -> &[TransactionArgument] {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::protobuf::RepeatedField<TransactionArgument>) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arguments(&mut self) -> &mut ::protobuf::RepeatedField<TransactionArgument> {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::protobuf::RepeatedField<TransactionArgument> {
        ::std::mem::replace(&mut self.arguments, ::protobuf::RepeatedField::new())
    }

    // repeated bytes modules = 3;


    pub fn get_modules(&self) -> &[::std::vec::Vec<u8>] {
        &self.modules
    }
    pub fn clear_modules(&mut self) {
        self.modules.clear();
    }

    // Param is passed by value, moved
    pub fn set_modules(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.modules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_modules(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.modules
    }

    // Take field
    pub fn take_modules(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.modules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Program {
    fn is_initialized(&self) -> bool {
        for v in &self.arguments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.code)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.arguments)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.modules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.code);
        }
        for value in &self.arguments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.modules {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.code.is_empty() {
            os.write_bytes(1, &self.code)?;
        }
        for v in &self.arguments {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.modules {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Program {
        Program::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "code",
                    |m: &Program| { &m.code },
                    |m: &mut Program| { &mut m.code },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionArgument>>(
                    "arguments",
                    |m: &Program| { &m.arguments },
                    |m: &mut Program| { &mut m.arguments },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "modules",
                    |m: &Program| { &m.modules },
                    |m: &mut Program| { &mut m.modules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Program>(
                    "Program",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Program {
        static mut instance: ::protobuf::lazy::Lazy<Program> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Program,
        };
        unsafe {
            instance.get(Program::new)
        }
    }
}

impl ::protobuf::Clear for Program {
    fn clear(&mut self) {
        self.code.clear();
        self.arguments.clear();
        self.modules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Program {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Program {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionArgument {
    // message fields
    pub field_type: TransactionArgument_ArgType,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionArgument {
    fn default() -> &'a TransactionArgument {
        <TransactionArgument as ::protobuf::Message>::default_instance()
    }
}

impl TransactionArgument {
    pub fn new() -> TransactionArgument {
        ::std::default::Default::default()
    }

    // .types.TransactionArgument.ArgType type = 1;


    pub fn get_field_type(&self) -> TransactionArgument_ArgType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TransactionArgument_ArgType::U64;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TransactionArgument_ArgType) {
        self.field_type = v;
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TransactionArgument {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != TransactionArgument_ArgType::U64 {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != TransactionArgument_ArgType::U64 {
            os.write_enum(1, self.field_type.value())?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionArgument {
        TransactionArgument::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransactionArgument_ArgType>>(
                    "type",
                    |m: &TransactionArgument| { &m.field_type },
                    |m: &mut TransactionArgument| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &TransactionArgument| { &m.data },
                    |m: &mut TransactionArgument| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionArgument>(
                    "TransactionArgument",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionArgument {
        static mut instance: ::protobuf::lazy::Lazy<TransactionArgument> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionArgument,
        };
        unsafe {
            instance.get(TransactionArgument::new)
        }
    }
}

impl ::protobuf::Clear for TransactionArgument {
    fn clear(&mut self) {
        self.field_type = TransactionArgument_ArgType::U64;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionArgument {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionArgument {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransactionArgument_ArgType {
    U64 = 0,
    ADDRESS = 1,
    STRING = 2,
    BYTEARRAY = 3,
}

impl ::protobuf::ProtobufEnum for TransactionArgument_ArgType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionArgument_ArgType> {
        match value {
            0 => ::std::option::Option::Some(TransactionArgument_ArgType::U64),
            1 => ::std::option::Option::Some(TransactionArgument_ArgType::ADDRESS),
            2 => ::std::option::Option::Some(TransactionArgument_ArgType::STRING),
            3 => ::std::option::Option::Some(TransactionArgument_ArgType::BYTEARRAY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransactionArgument_ArgType] = &[
            TransactionArgument_ArgType::U64,
            TransactionArgument_ArgType::ADDRESS,
            TransactionArgument_ArgType::STRING,
            TransactionArgument_ArgType::BYTEARRAY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TransactionArgument_ArgType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TransactionArgument_ArgType {
}

impl ::std::default::Default for TransactionArgument_ArgType {
    fn default() -> Self {
        TransactionArgument_ArgType::U64
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionArgument_ArgType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedTransaction {
    // message fields
    pub raw_txn_bytes: ::std::vec::Vec<u8>,
    pub sender_public_key: ::std::vec::Vec<u8>,
    pub sender_signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignedTransaction {
    fn default() -> &'a SignedTransaction {
        <SignedTransaction as ::protobuf::Message>::default_instance()
    }
}

impl SignedTransaction {
    pub fn new() -> SignedTransaction {
        ::std::default::Default::default()
    }

    // bytes raw_txn_bytes = 1;


    pub fn get_raw_txn_bytes(&self) -> &[u8] {
        &self.raw_txn_bytes
    }
    pub fn clear_raw_txn_bytes(&mut self) {
        self.raw_txn_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_txn_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw_txn_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_txn_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.raw_txn_bytes
    }

    // Take field
    pub fn take_raw_txn_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.raw_txn_bytes, ::std::vec::Vec::new())
    }

    // bytes sender_public_key = 2;


    pub fn get_sender_public_key(&self) -> &[u8] {
        &self.sender_public_key
    }
    pub fn clear_sender_public_key(&mut self) {
        self.sender_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender_public_key
    }

    // Take field
    pub fn take_sender_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender_public_key, ::std::vec::Vec::new())
    }

    // bytes sender_signature = 3;


    pub fn get_sender_signature(&self) -> &[u8] {
        &self.sender_signature
    }
    pub fn clear_sender_signature(&mut self) {
        self.sender_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender_signature
    }

    // Take field
    pub fn take_sender_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender_signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignedTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.raw_txn_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender_public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender_signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.raw_txn_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.raw_txn_bytes);
        }
        if !self.sender_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sender_public_key);
        }
        if !self.sender_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.sender_signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.raw_txn_bytes.is_empty() {
            os.write_bytes(1, &self.raw_txn_bytes)?;
        }
        if !self.sender_public_key.is_empty() {
            os.write_bytes(2, &self.sender_public_key)?;
        }
        if !self.sender_signature.is_empty() {
            os.write_bytes(3, &self.sender_signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedTransaction {
        SignedTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "raw_txn_bytes",
                    |m: &SignedTransaction| { &m.raw_txn_bytes },
                    |m: &mut SignedTransaction| { &mut m.raw_txn_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sender_public_key",
                    |m: &SignedTransaction| { &m.sender_public_key },
                    |m: &mut SignedTransaction| { &mut m.sender_public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sender_signature",
                    |m: &SignedTransaction| { &m.sender_signature },
                    |m: &mut SignedTransaction| { &mut m.sender_signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedTransaction>(
                    "SignedTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SignedTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedTransaction,
        };
        unsafe {
            instance.get(SignedTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SignedTransaction {
    fn clear(&mut self) {
        self.raw_txn_bytes.clear();
        self.sender_public_key.clear();
        self.sender_signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedTransactionWithProof {
    // message fields
    pub version: u64,
    pub signed_transaction: ::protobuf::SingularPtrField<SignedTransaction>,
    pub proof: ::protobuf::SingularPtrField<super::proof::SignedTransactionProof>,
    pub events: ::protobuf::SingularPtrField<super::events::EventsList>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignedTransactionWithProof {
    fn default() -> &'a SignedTransactionWithProof {
        <SignedTransactionWithProof as ::protobuf::Message>::default_instance()
    }
}

impl SignedTransactionWithProof {
    pub fn new() -> SignedTransactionWithProof {
        ::std::default::Default::default()
    }

    // uint64 version = 1;


    pub fn get_version(&self) -> u64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = v;
    }

    // .types.SignedTransaction signed_transaction = 2;


    pub fn get_signed_transaction(&self) -> &SignedTransaction {
        self.signed_transaction.as_ref().unwrap_or_else(|| SignedTransaction::default_instance())
    }
    pub fn clear_signed_transaction(&mut self) {
        self.signed_transaction.clear();
    }

    pub fn has_signed_transaction(&self) -> bool {
        self.signed_transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_transaction(&mut self, v: SignedTransaction) {
        self.signed_transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_transaction(&mut self) -> &mut SignedTransaction {
        if self.signed_transaction.is_none() {
            self.signed_transaction.set_default();
        }
        self.signed_transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_transaction(&mut self) -> SignedTransaction {
        self.signed_transaction.take().unwrap_or_else(|| SignedTransaction::new())
    }

    // .types.SignedTransactionProof proof = 3;


    pub fn get_proof(&self) -> &super::proof::SignedTransactionProof {
        self.proof.as_ref().unwrap_or_else(|| super::proof::SignedTransactionProof::default_instance())
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: super::proof::SignedTransactionProof) {
        self.proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut super::proof::SignedTransactionProof {
        if self.proof.is_none() {
            self.proof.set_default();
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> super::proof::SignedTransactionProof {
        self.proof.take().unwrap_or_else(|| super::proof::SignedTransactionProof::new())
    }

    // .types.EventsList events = 4;


    pub fn get_events(&self) -> &super::events::EventsList {
        self.events.as_ref().unwrap_or_else(|| super::events::EventsList::default_instance())
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    pub fn has_events(&self) -> bool {
        self.events.is_some()
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: super::events::EventsList) {
        self.events = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_events(&mut self) -> &mut super::events::EventsList {
        if self.events.is_none() {
            self.events.set_default();
        }
        self.events.as_mut().unwrap()
    }

    // Take field
    pub fn take_events(&mut self) -> super::events::EventsList {
        self.events.take().unwrap_or_else(|| super::events::EventsList::new())
    }
}

impl ::protobuf::Message for SignedTransactionWithProof {
    fn is_initialized(&self) -> bool {
        for v in &self.signed_transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signed_transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.signed_transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.events.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint64(1, self.version)?;
        }
        if let Some(ref v) = self.signed_transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.proof.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.events.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedTransactionWithProof {
        SignedTransactionWithProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "version",
                    |m: &SignedTransactionWithProof| { &m.version },
                    |m: &mut SignedTransactionWithProof| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedTransaction>>(
                    "signed_transaction",
                    |m: &SignedTransactionWithProof| { &m.signed_transaction },
                    |m: &mut SignedTransactionWithProof| { &mut m.signed_transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proof::SignedTransactionProof>>(
                    "proof",
                    |m: &SignedTransactionWithProof| { &m.proof },
                    |m: &mut SignedTransactionWithProof| { &mut m.proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::events::EventsList>>(
                    "events",
                    |m: &SignedTransactionWithProof| { &m.events },
                    |m: &mut SignedTransactionWithProof| { &mut m.events },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedTransactionWithProof>(
                    "SignedTransactionWithProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedTransactionWithProof {
        static mut instance: ::protobuf::lazy::Lazy<SignedTransactionWithProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedTransactionWithProof,
        };
        unsafe {
            instance.get(SignedTransactionWithProof::new)
        }
    }
}

impl ::protobuf::Clear for SignedTransactionWithProof {
    fn clear(&mut self) {
        self.version = 0;
        self.signed_transaction.clear();
        self.proof.clear();
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedTransactionWithProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedTransactionWithProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedTransactionsBlock {
    // message fields
    pub transactions: ::protobuf::RepeatedField<SignedTransaction>,
    pub validator_public_key: ::std::vec::Vec<u8>,
    pub validator_signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignedTransactionsBlock {
    fn default() -> &'a SignedTransactionsBlock {
        <SignedTransactionsBlock as ::protobuf::Message>::default_instance()
    }
}

impl SignedTransactionsBlock {
    pub fn new() -> SignedTransactionsBlock {
        ::std::default::Default::default()
    }

    // repeated .types.SignedTransaction transactions = 1;


    pub fn get_transactions(&self) -> &[SignedTransaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<SignedTransaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<SignedTransaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<SignedTransaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // bytes validator_public_key = 2;


    pub fn get_validator_public_key(&self) -> &[u8] {
        &self.validator_public_key
    }
    pub fn clear_validator_public_key(&mut self) {
        self.validator_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.validator_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validator_public_key
    }

    // Take field
    pub fn take_validator_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validator_public_key, ::std::vec::Vec::new())
    }

    // bytes validator_signature = 3;


    pub fn get_validator_signature(&self) -> &[u8] {
        &self.validator_signature
    }
    pub fn clear_validator_signature(&mut self) {
        self.validator_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.validator_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validator_signature
    }

    // Take field
    pub fn take_validator_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validator_signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignedTransactionsBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validator_public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validator_signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.validator_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.validator_public_key);
        }
        if !self.validator_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.validator_signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.validator_public_key.is_empty() {
            os.write_bytes(2, &self.validator_public_key)?;
        }
        if !self.validator_signature.is_empty() {
            os.write_bytes(3, &self.validator_signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedTransactionsBlock {
        SignedTransactionsBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedTransaction>>(
                    "transactions",
                    |m: &SignedTransactionsBlock| { &m.transactions },
                    |m: &mut SignedTransactionsBlock| { &mut m.transactions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "validator_public_key",
                    |m: &SignedTransactionsBlock| { &m.validator_public_key },
                    |m: &mut SignedTransactionsBlock| { &mut m.validator_public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "validator_signature",
                    |m: &SignedTransactionsBlock| { &m.validator_signature },
                    |m: &mut SignedTransactionsBlock| { &mut m.validator_signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedTransactionsBlock>(
                    "SignedTransactionsBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedTransactionsBlock {
        static mut instance: ::protobuf::lazy::Lazy<SignedTransactionsBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedTransactionsBlock,
        };
        unsafe {
            instance.get(SignedTransactionsBlock::new)
        }
    }
}

impl ::protobuf::Clear for SignedTransactionsBlock {
    fn clear(&mut self) {
        self.transactions.clear();
        self.validator_public_key.clear();
        self.validator_signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedTransactionsBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedTransactionsBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteSet {
    // message fields
    pub write_set: ::protobuf::RepeatedField<WriteOp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteSet {
    fn default() -> &'a WriteSet {
        <WriteSet as ::protobuf::Message>::default_instance()
    }
}

impl WriteSet {
    pub fn new() -> WriteSet {
        ::std::default::Default::default()
    }

    // repeated .types.WriteOp write_set = 1;


    pub fn get_write_set(&self) -> &[WriteOp] {
        &self.write_set
    }
    pub fn clear_write_set(&mut self) {
        self.write_set.clear();
    }

    // Param is passed by value, moved
    pub fn set_write_set(&mut self, v: ::protobuf::RepeatedField<WriteOp>) {
        self.write_set = v;
    }

    // Mutable pointer to the field.
    pub fn mut_write_set(&mut self) -> &mut ::protobuf::RepeatedField<WriteOp> {
        &mut self.write_set
    }

    // Take field
    pub fn take_write_set(&mut self) -> ::protobuf::RepeatedField<WriteOp> {
        ::std::mem::replace(&mut self.write_set, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WriteSet {
    fn is_initialized(&self) -> bool {
        for v in &self.write_set {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.write_set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.write_set {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.write_set {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteSet {
        WriteSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WriteOp>>(
                    "write_set",
                    |m: &WriteSet| { &m.write_set },
                    |m: &mut WriteSet| { &mut m.write_set },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteSet>(
                    "WriteSet",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteSet {
        static mut instance: ::protobuf::lazy::Lazy<WriteSet> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteSet,
        };
        unsafe {
            instance.get(WriteSet::new)
        }
    }
}

impl ::protobuf::Clear for WriteSet {
    fn clear(&mut self) {
        self.write_set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteSet {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteOp {
    // message fields
    pub access_path: ::protobuf::SingularPtrField<super::access_path::AccessPath>,
    pub value: ::std::vec::Vec<u8>,
    pub field_type: WriteOpType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteOp {
    fn default() -> &'a WriteOp {
        <WriteOp as ::protobuf::Message>::default_instance()
    }
}

impl WriteOp {
    pub fn new() -> WriteOp {
        ::std::default::Default::default()
    }

    // .types.AccessPath access_path = 1;


    pub fn get_access_path(&self) -> &super::access_path::AccessPath {
        self.access_path.as_ref().unwrap_or_else(|| super::access_path::AccessPath::default_instance())
    }
    pub fn clear_access_path(&mut self) {
        self.access_path.clear();
    }

    pub fn has_access_path(&self) -> bool {
        self.access_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_path(&mut self, v: super::access_path::AccessPath) {
        self.access_path = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_path(&mut self) -> &mut super::access_path::AccessPath {
        if self.access_path.is_none() {
            self.access_path.set_default();
        }
        self.access_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_path(&mut self) -> super::access_path::AccessPath {
        self.access_path.take().unwrap_or_else(|| super::access_path::AccessPath::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // .types.WriteOpType type = 3;


    pub fn get_field_type(&self) -> WriteOpType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = WriteOpType::Write;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: WriteOpType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for WriteOp {
    fn is_initialized(&self) -> bool {
        for v in &self.access_path {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.access_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.access_path.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if self.field_type != WriteOpType::Write {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.access_path.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if self.field_type != WriteOpType::Write {
            os.write_enum(3, self.field_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteOp {
        WriteOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::access_path::AccessPath>>(
                    "access_path",
                    |m: &WriteOp| { &m.access_path },
                    |m: &mut WriteOp| { &mut m.access_path },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &WriteOp| { &m.value },
                    |m: &mut WriteOp| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<WriteOpType>>(
                    "type",
                    |m: &WriteOp| { &m.field_type },
                    |m: &mut WriteOp| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteOp>(
                    "WriteOp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteOp {
        static mut instance: ::protobuf::lazy::Lazy<WriteOp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteOp,
        };
        unsafe {
            instance.get(WriteOp::new)
        }
    }
}

impl ::protobuf::Clear for WriteOp {
    fn clear(&mut self) {
        self.access_path.clear();
        self.value.clear();
        self.field_type = WriteOpType::Write;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteOp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountState {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub blob: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountState {
    fn default() -> &'a AccountState {
        <AccountState as ::protobuf::Message>::default_instance()
    }
}

impl AccountState {
    pub fn new() -> AccountState {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes blob = 2;


    pub fn get_blob(&self) -> &[u8] {
        &self.blob
    }
    pub fn clear_blob(&mut self) {
        self.blob.clear();
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: ::std::vec::Vec<u8>) {
        self.blob = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blob(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.blob
    }

    // Take field
    pub fn take_blob(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.blob, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AccountState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.blob)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.blob.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.blob);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.blob.is_empty() {
            os.write_bytes(2, &self.blob)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountState {
        AccountState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "address",
                    |m: &AccountState| { &m.address },
                    |m: &mut AccountState| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "blob",
                    |m: &AccountState| { &m.blob },
                    |m: &mut AccountState| { &mut m.blob },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountState>(
                    "AccountState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountState {
        static mut instance: ::protobuf::lazy::Lazy<AccountState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountState,
        };
        unsafe {
            instance.get(AccountState::new)
        }
    }
}

impl ::protobuf::Clear for AccountState {
    fn clear(&mut self) {
        self.address.clear();
        self.blob.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionToCommit {
    // message fields
    pub signed_txn: ::protobuf::SingularPtrField<SignedTransaction>,
    pub account_states: ::protobuf::RepeatedField<AccountState>,
    pub events: ::protobuf::RepeatedField<super::events::Event>,
    pub gas_used: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionToCommit {
    fn default() -> &'a TransactionToCommit {
        <TransactionToCommit as ::protobuf::Message>::default_instance()
    }
}

impl TransactionToCommit {
    pub fn new() -> TransactionToCommit {
        ::std::default::Default::default()
    }

    // .types.SignedTransaction signed_txn = 1;


    pub fn get_signed_txn(&self) -> &SignedTransaction {
        self.signed_txn.as_ref().unwrap_or_else(|| SignedTransaction::default_instance())
    }
    pub fn clear_signed_txn(&mut self) {
        self.signed_txn.clear();
    }

    pub fn has_signed_txn(&self) -> bool {
        self.signed_txn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_txn(&mut self, v: SignedTransaction) {
        self.signed_txn = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_txn(&mut self) -> &mut SignedTransaction {
        if self.signed_txn.is_none() {
            self.signed_txn.set_default();
        }
        self.signed_txn.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_txn(&mut self) -> SignedTransaction {
        self.signed_txn.take().unwrap_or_else(|| SignedTransaction::new())
    }

    // repeated .types.AccountState account_states = 2;


    pub fn get_account_states(&self) -> &[AccountState] {
        &self.account_states
    }
    pub fn clear_account_states(&mut self) {
        self.account_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_states(&mut self, v: ::protobuf::RepeatedField<AccountState>) {
        self.account_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_states(&mut self) -> &mut ::protobuf::RepeatedField<AccountState> {
        &mut self.account_states
    }

    // Take field
    pub fn take_account_states(&mut self) -> ::protobuf::RepeatedField<AccountState> {
        ::std::mem::replace(&mut self.account_states, ::protobuf::RepeatedField::new())
    }

    // repeated .types.Event events = 3;


    pub fn get_events(&self) -> &[super::events::Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<super::events::Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<super::events::Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<super::events::Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // uint64 gas_used = 4;


    pub fn get_gas_used(&self) -> u64 {
        self.gas_used
    }
    pub fn clear_gas_used(&mut self) {
        self.gas_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_used(&mut self, v: u64) {
        self.gas_used = v;
    }
}

impl ::protobuf::Message for TransactionToCommit {
    fn is_initialized(&self) -> bool {
        for v in &self.signed_txn {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.account_states {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signed_txn)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.account_states)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_used = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signed_txn.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.account_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::value_size(4, self.gas_used, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signed_txn.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.account_states {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.events {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.gas_used != 0 {
            os.write_uint64(4, self.gas_used)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionToCommit {
        TransactionToCommit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedTransaction>>(
                    "signed_txn",
                    |m: &TransactionToCommit| { &m.signed_txn },
                    |m: &mut TransactionToCommit| { &mut m.signed_txn },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountState>>(
                    "account_states",
                    |m: &TransactionToCommit| { &m.account_states },
                    |m: &mut TransactionToCommit| { &mut m.account_states },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::events::Event>>(
                    "events",
                    |m: &TransactionToCommit| { &m.events },
                    |m: &mut TransactionToCommit| { &mut m.events },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_used",
                    |m: &TransactionToCommit| { &m.gas_used },
                    |m: &mut TransactionToCommit| { &mut m.gas_used },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionToCommit>(
                    "TransactionToCommit",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionToCommit {
        static mut instance: ::protobuf::lazy::Lazy<TransactionToCommit> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionToCommit,
        };
        unsafe {
            instance.get(TransactionToCommit::new)
        }
    }
}

impl ::protobuf::Clear for TransactionToCommit {
    fn clear(&mut self) {
        self.signed_txn.clear();
        self.account_states.clear();
        self.events.clear();
        self.gas_used = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionToCommit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionToCommit {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionListWithProof {
    // message fields
    pub transactions: ::protobuf::RepeatedField<SignedTransaction>,
    pub infos: ::protobuf::RepeatedField<super::transaction_info::TransactionInfo>,
    pub events_for_versions: ::protobuf::SingularPtrField<super::events::EventsForVersions>,
    pub first_transaction_version: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt64Value>,
    pub proof_of_first_transaction: ::protobuf::SingularPtrField<super::proof::AccumulatorProof>,
    pub proof_of_last_transaction: ::protobuf::SingularPtrField<super::proof::AccumulatorProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionListWithProof {
    fn default() -> &'a TransactionListWithProof {
        <TransactionListWithProof as ::protobuf::Message>::default_instance()
    }
}

impl TransactionListWithProof {
    pub fn new() -> TransactionListWithProof {
        ::std::default::Default::default()
    }

    // repeated .types.SignedTransaction transactions = 1;


    pub fn get_transactions(&self) -> &[SignedTransaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<SignedTransaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<SignedTransaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<SignedTransaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // repeated .types.TransactionInfo infos = 2;


    pub fn get_infos(&self) -> &[super::transaction_info::TransactionInfo] {
        &self.infos
    }
    pub fn clear_infos(&mut self) {
        self.infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_infos(&mut self, v: ::protobuf::RepeatedField<super::transaction_info::TransactionInfo>) {
        self.infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_infos(&mut self) -> &mut ::protobuf::RepeatedField<super::transaction_info::TransactionInfo> {
        &mut self.infos
    }

    // Take field
    pub fn take_infos(&mut self) -> ::protobuf::RepeatedField<super::transaction_info::TransactionInfo> {
        ::std::mem::replace(&mut self.infos, ::protobuf::RepeatedField::new())
    }

    // .types.EventsForVersions events_for_versions = 3;


    pub fn get_events_for_versions(&self) -> &super::events::EventsForVersions {
        self.events_for_versions.as_ref().unwrap_or_else(|| super::events::EventsForVersions::default_instance())
    }
    pub fn clear_events_for_versions(&mut self) {
        self.events_for_versions.clear();
    }

    pub fn has_events_for_versions(&self) -> bool {
        self.events_for_versions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_events_for_versions(&mut self, v: super::events::EventsForVersions) {
        self.events_for_versions = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_events_for_versions(&mut self) -> &mut super::events::EventsForVersions {
        if self.events_for_versions.is_none() {
            self.events_for_versions.set_default();
        }
        self.events_for_versions.as_mut().unwrap()
    }

    // Take field
    pub fn take_events_for_versions(&mut self) -> super::events::EventsForVersions {
        self.events_for_versions.take().unwrap_or_else(|| super::events::EventsForVersions::new())
    }

    // .google.protobuf.UInt64Value first_transaction_version = 4;


    pub fn get_first_transaction_version(&self) -> &::protobuf::well_known_types::UInt64Value {
        self.first_transaction_version.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::default_instance())
    }
    pub fn clear_first_transaction_version(&mut self) {
        self.first_transaction_version.clear();
    }

    pub fn has_first_transaction_version(&self) -> bool {
        self.first_transaction_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_transaction_version(&mut self, v: ::protobuf::well_known_types::UInt64Value) {
        self.first_transaction_version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_transaction_version(&mut self) -> &mut ::protobuf::well_known_types::UInt64Value {
        if self.first_transaction_version.is_none() {
            self.first_transaction_version.set_default();
        }
        self.first_transaction_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_first_transaction_version(&mut self) -> ::protobuf::well_known_types::UInt64Value {
        self.first_transaction_version.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::new())
    }

    // .types.AccumulatorProof proof_of_first_transaction = 5;


    pub fn get_proof_of_first_transaction(&self) -> &super::proof::AccumulatorProof {
        self.proof_of_first_transaction.as_ref().unwrap_or_else(|| super::proof::AccumulatorProof::default_instance())
    }
    pub fn clear_proof_of_first_transaction(&mut self) {
        self.proof_of_first_transaction.clear();
    }

    pub fn has_proof_of_first_transaction(&self) -> bool {
        self.proof_of_first_transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_of_first_transaction(&mut self, v: super::proof::AccumulatorProof) {
        self.proof_of_first_transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_of_first_transaction(&mut self) -> &mut super::proof::AccumulatorProof {
        if self.proof_of_first_transaction.is_none() {
            self.proof_of_first_transaction.set_default();
        }
        self.proof_of_first_transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_of_first_transaction(&mut self) -> super::proof::AccumulatorProof {
        self.proof_of_first_transaction.take().unwrap_or_else(|| super::proof::AccumulatorProof::new())
    }

    // .types.AccumulatorProof proof_of_last_transaction = 6;


    pub fn get_proof_of_last_transaction(&self) -> &super::proof::AccumulatorProof {
        self.proof_of_last_transaction.as_ref().unwrap_or_else(|| super::proof::AccumulatorProof::default_instance())
    }
    pub fn clear_proof_of_last_transaction(&mut self) {
        self.proof_of_last_transaction.clear();
    }

    pub fn has_proof_of_last_transaction(&self) -> bool {
        self.proof_of_last_transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_of_last_transaction(&mut self, v: super::proof::AccumulatorProof) {
        self.proof_of_last_transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_of_last_transaction(&mut self) -> &mut super::proof::AccumulatorProof {
        if self.proof_of_last_transaction.is_none() {
            self.proof_of_last_transaction.set_default();
        }
        self.proof_of_last_transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_of_last_transaction(&mut self) -> super::proof::AccumulatorProof {
        self.proof_of_last_transaction.take().unwrap_or_else(|| super::proof::AccumulatorProof::new())
    }
}

impl ::protobuf::Message for TransactionListWithProof {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.infos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events_for_versions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.first_transaction_version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_of_first_transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_of_last_transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.infos)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.events_for_versions)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.first_transaction_version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_of_first_transaction)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_of_last_transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.events_for_versions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.first_transaction_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.proof_of_first_transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.proof_of_last_transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.infos {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.events_for_versions.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.first_transaction_version.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.proof_of_first_transaction.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.proof_of_last_transaction.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionListWithProof {
        TransactionListWithProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedTransaction>>(
                    "transactions",
                    |m: &TransactionListWithProof| { &m.transactions },
                    |m: &mut TransactionListWithProof| { &mut m.transactions },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction_info::TransactionInfo>>(
                    "infos",
                    |m: &TransactionListWithProof| { &m.infos },
                    |m: &mut TransactionListWithProof| { &mut m.infos },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::events::EventsForVersions>>(
                    "events_for_versions",
                    |m: &TransactionListWithProof| { &m.events_for_versions },
                    |m: &mut TransactionListWithProof| { &mut m.events_for_versions },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt64Value>>(
                    "first_transaction_version",
                    |m: &TransactionListWithProof| { &m.first_transaction_version },
                    |m: &mut TransactionListWithProof| { &mut m.first_transaction_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proof::AccumulatorProof>>(
                    "proof_of_first_transaction",
                    |m: &TransactionListWithProof| { &m.proof_of_first_transaction },
                    |m: &mut TransactionListWithProof| { &mut m.proof_of_first_transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proof::AccumulatorProof>>(
                    "proof_of_last_transaction",
                    |m: &TransactionListWithProof| { &m.proof_of_last_transaction },
                    |m: &mut TransactionListWithProof| { &mut m.proof_of_last_transaction },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionListWithProof>(
                    "TransactionListWithProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionListWithProof {
        static mut instance: ::protobuf::lazy::Lazy<TransactionListWithProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionListWithProof,
        };
        unsafe {
            instance.get(TransactionListWithProof::new)
        }
    }
}

impl ::protobuf::Clear for TransactionListWithProof {
    fn clear(&mut self) {
        self.transactions.clear();
        self.infos.clear();
        self.events_for_versions.clear();
        self.first_transaction_version.clear();
        self.proof_of_first_transaction.clear();
        self.proof_of_last_transaction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionListWithProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionListWithProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum WriteOpType {
    Write = 0,
    Delete = 1,
}

impl ::protobuf::ProtobufEnum for WriteOpType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<WriteOpType> {
        match value {
            0 => ::std::option::Option::Some(WriteOpType::Write),
            1 => ::std::option::Option::Some(WriteOpType::Delete),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [WriteOpType] = &[
            WriteOpType::Write,
            WriteOpType::Delete,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("WriteOpType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for WriteOpType {
}

impl ::std::default::Default for WriteOpType {
    fn default() -> Self {
        WriteOpType::Write
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteOpType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11transaction.proto\x12\x05types\x1a\x11access_path.proto\x1a\x0ceve\
    nts.proto\x1a\x0bproof.proto\x1a\x16transaction_info.proto\x1a\x1egoogle\
    /protobuf/wrappers.proto\"\xbc\x02\n\x0eRawTransaction\x12%\n\x0esender_\
    account\x18\x01\x20\x01(\x0cR\rsenderAccount\x12'\n\x0fsequence_number\
    \x18\x02\x20\x01(\x04R\x0esequenceNumber\x12*\n\x07program\x18\x03\x20\
    \x01(\x0b2\x0e.types.ProgramH\0R\x07program\x12.\n\twrite_set\x18\x04\
    \x20\x01(\x0b2\x0f.types.WriteSetH\0R\x08writeSet\x12$\n\x0emax_gas_amou\
    nt\x18\x05\x20\x01(\x04R\x0cmaxGasAmount\x12$\n\x0egas_unit_price\x18\
    \x06\x20\x01(\x04R\x0cgasUnitPrice\x12'\n\x0fexpiration_time\x18\x07\x20\
    \x01(\x04R\x0eexpirationTimeB\t\n\x07payload\"q\n\x07Program\x12\x12\n\
    \x04code\x18\x01\x20\x01(\x0cR\x04code\x128\n\targuments\x18\x02\x20\x03\
    (\x0b2\x1a.types.TransactionArgumentR\targuments\x12\x18\n\x07modules\
    \x18\x03\x20\x03(\x0cR\x07modules\"\x9d\x01\n\x13TransactionArgument\x12\
    6\n\x04type\x18\x01\x20\x01(\x0e2\".types.TransactionArgument.ArgTypeR\
    \x04type\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\":\n\x07ArgType\
    \x12\x07\n\x03U64\x10\0\x12\x0b\n\x07ADDRESS\x10\x01\x12\n\n\x06STRING\
    \x10\x02\x12\r\n\tBYTEARRAY\x10\x03\"\x8e\x01\n\x11SignedTransaction\x12\
    \"\n\rraw_txn_bytes\x18\x01\x20\x01(\x0cR\x0brawTxnBytes\x12*\n\x11sende\
    r_public_key\x18\x02\x20\x01(\x0cR\x0fsenderPublicKey\x12)\n\x10sender_s\
    ignature\x18\x03\x20\x01(\x0cR\x0fsenderSignature\"\xdf\x01\n\x1aSignedT\
    ransactionWithProof\x12\x18\n\x07version\x18\x01\x20\x01(\x04R\x07versio\
    n\x12G\n\x12signed_transaction\x18\x02\x20\x01(\x0b2\x18.types.SignedTra\
    nsactionR\x11signedTransaction\x123\n\x05proof\x18\x03\x20\x01(\x0b2\x1d\
    .types.SignedTransactionProofR\x05proof\x12)\n\x06events\x18\x04\x20\x01\
    (\x0b2\x11.types.EventsListR\x06events\"\xba\x01\n\x17SignedTransactions\
    Block\x12<\n\x0ctransactions\x18\x01\x20\x03(\x0b2\x18.types.SignedTrans\
    actionR\x0ctransactions\x120\n\x14validator_public_key\x18\x02\x20\x01(\
    \x0cR\x12validatorPublicKey\x12/\n\x13validator_signature\x18\x03\x20\
    \x01(\x0cR\x12validatorSignature\"7\n\x08WriteSet\x12+\n\twrite_set\x18\
    \x01\x20\x03(\x0b2\x0e.types.WriteOpR\x08writeSet\"{\n\x07WriteOp\x122\n\
    \x0baccess_path\x18\x01\x20\x01(\x0b2\x11.types.AccessPathR\naccessPath\
    \x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\x12&\n\x04type\x18\
    \x03\x20\x01(\x0e2\x12.types.WriteOpTypeR\x04type\"<\n\x0cAccountState\
    \x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\x07address\x12\x12\n\x04blob\
    \x18\x02\x20\x01(\x0cR\x04blob\"\xcb\x01\n\x13TransactionToCommit\x127\n\
    \nsigned_txn\x18\x01\x20\x01(\x0b2\x18.types.SignedTransactionR\tsignedT\
    xn\x12:\n\x0eaccount_states\x18\x02\x20\x03(\x0b2\x13.types.AccountState\
    R\raccountStates\x12$\n\x06events\x18\x03\x20\x03(\x0b2\x0c.types.EventR\
    \x06events\x12\x19\n\x08gas_used\x18\x04\x20\x01(\x04R\x07gasUsed\"\xd4\
    \x03\n\x18TransactionListWithProof\x12<\n\x0ctransactions\x18\x01\x20\
    \x03(\x0b2\x18.types.SignedTransactionR\x0ctransactions\x12,\n\x05infos\
    \x18\x02\x20\x03(\x0b2\x16.types.TransactionInfoR\x05infos\x12H\n\x13eve\
    nts_for_versions\x18\x03\x20\x01(\x0b2\x18.types.EventsForVersionsR\x11e\
    ventsForVersions\x12X\n\x19first_transaction_version\x18\x04\x20\x01(\
    \x0b2\x1c.google.protobuf.UInt64ValueR\x17firstTransactionVersion\x12T\n\
    \x1aproof_of_first_transaction\x18\x05\x20\x01(\x0b2\x17.types.Accumulat\
    orProofR\x17proofOfFirstTransaction\x12R\n\x19proof_of_last_transaction\
    \x18\x06\x20\x01(\x0b2\x17.types.AccumulatorProofR\x16proofOfLastTransac\
    tion*$\n\x0bWriteOpType\x12\t\n\x05Write\x10\0\x12\n\n\x06Delete\x10\x01\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
