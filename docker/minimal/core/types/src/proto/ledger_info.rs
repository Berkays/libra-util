// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ledger_info.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct LedgerInfo {
    // message fields
    pub version: u64,
    pub transaction_accumulator_hash: ::std::vec::Vec<u8>,
    pub consensus_data_hash: ::std::vec::Vec<u8>,
    pub consensus_block_id: ::std::vec::Vec<u8>,
    pub epoch_num: u64,
    pub timestamp_usecs: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedgerInfo {
    fn default() -> &'a LedgerInfo {
        <LedgerInfo as ::protobuf::Message>::default_instance()
    }
}

impl LedgerInfo {
    pub fn new() -> LedgerInfo {
        ::std::default::Default::default()
    }

    // uint64 version = 1;


    pub fn get_version(&self) -> u64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = v;
    }

    // bytes transaction_accumulator_hash = 2;


    pub fn get_transaction_accumulator_hash(&self) -> &[u8] {
        &self.transaction_accumulator_hash
    }
    pub fn clear_transaction_accumulator_hash(&mut self) {
        self.transaction_accumulator_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_accumulator_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_accumulator_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_accumulator_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_accumulator_hash
    }

    // Take field
    pub fn take_transaction_accumulator_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_accumulator_hash, ::std::vec::Vec::new())
    }

    // bytes consensus_data_hash = 3;


    pub fn get_consensus_data_hash(&self) -> &[u8] {
        &self.consensus_data_hash
    }
    pub fn clear_consensus_data_hash(&mut self) {
        self.consensus_data_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensus_data_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.consensus_data_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_data_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.consensus_data_hash
    }

    // Take field
    pub fn take_consensus_data_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.consensus_data_hash, ::std::vec::Vec::new())
    }

    // bytes consensus_block_id = 4;


    pub fn get_consensus_block_id(&self) -> &[u8] {
        &self.consensus_block_id
    }
    pub fn clear_consensus_block_id(&mut self) {
        self.consensus_block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensus_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.consensus_block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.consensus_block_id
    }

    // Take field
    pub fn take_consensus_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.consensus_block_id, ::std::vec::Vec::new())
    }

    // uint64 epoch_num = 5;


    pub fn get_epoch_num(&self) -> u64 {
        self.epoch_num
    }
    pub fn clear_epoch_num(&mut self) {
        self.epoch_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch_num(&mut self, v: u64) {
        self.epoch_num = v;
    }

    // uint64 timestamp_usecs = 6;


    pub fn get_timestamp_usecs(&self) -> u64 {
        self.timestamp_usecs
    }
    pub fn clear_timestamp_usecs(&mut self) {
        self.timestamp_usecs = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_usecs(&mut self, v: u64) {
        self.timestamp_usecs = v;
    }
}

impl ::protobuf::Message for LedgerInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_accumulator_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.consensus_data_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.consensus_block_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch_num = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp_usecs = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.transaction_accumulator_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_accumulator_hash);
        }
        if !self.consensus_data_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.consensus_data_hash);
        }
        if !self.consensus_block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.consensus_block_id);
        }
        if self.epoch_num != 0 {
            my_size += ::protobuf::rt::value_size(5, self.epoch_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp_usecs != 0 {
            my_size += ::protobuf::rt::value_size(6, self.timestamp_usecs, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint64(1, self.version)?;
        }
        if !self.transaction_accumulator_hash.is_empty() {
            os.write_bytes(2, &self.transaction_accumulator_hash)?;
        }
        if !self.consensus_data_hash.is_empty() {
            os.write_bytes(3, &self.consensus_data_hash)?;
        }
        if !self.consensus_block_id.is_empty() {
            os.write_bytes(4, &self.consensus_block_id)?;
        }
        if self.epoch_num != 0 {
            os.write_uint64(5, self.epoch_num)?;
        }
        if self.timestamp_usecs != 0 {
            os.write_uint64(6, self.timestamp_usecs)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedgerInfo {
        LedgerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "version",
                    |m: &LedgerInfo| { &m.version },
                    |m: &mut LedgerInfo| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_accumulator_hash",
                    |m: &LedgerInfo| { &m.transaction_accumulator_hash },
                    |m: &mut LedgerInfo| { &mut m.transaction_accumulator_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "consensus_data_hash",
                    |m: &LedgerInfo| { &m.consensus_data_hash },
                    |m: &mut LedgerInfo| { &mut m.consensus_data_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "consensus_block_id",
                    |m: &LedgerInfo| { &m.consensus_block_id },
                    |m: &mut LedgerInfo| { &mut m.consensus_block_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch_num",
                    |m: &LedgerInfo| { &m.epoch_num },
                    |m: &mut LedgerInfo| { &mut m.epoch_num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp_usecs",
                    |m: &LedgerInfo| { &m.timestamp_usecs },
                    |m: &mut LedgerInfo| { &mut m.timestamp_usecs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LedgerInfo>(
                    "LedgerInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LedgerInfo {
        static mut instance: ::protobuf::lazy::Lazy<LedgerInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LedgerInfo,
        };
        unsafe {
            instance.get(LedgerInfo::new)
        }
    }
}

impl ::protobuf::Clear for LedgerInfo {
    fn clear(&mut self) {
        self.version = 0;
        self.transaction_accumulator_hash.clear();
        self.consensus_data_hash.clear();
        self.consensus_block_id.clear();
        self.epoch_num = 0;
        self.timestamp_usecs = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedgerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LedgerInfoWithSignatures {
    // message fields
    pub signatures: ::protobuf::RepeatedField<ValidatorSignature>,
    pub ledger_info: ::protobuf::SingularPtrField<LedgerInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedgerInfoWithSignatures {
    fn default() -> &'a LedgerInfoWithSignatures {
        <LedgerInfoWithSignatures as ::protobuf::Message>::default_instance()
    }
}

impl LedgerInfoWithSignatures {
    pub fn new() -> LedgerInfoWithSignatures {
        ::std::default::Default::default()
    }

    // repeated .types.ValidatorSignature signatures = 1;


    pub fn get_signatures(&self) -> &[ValidatorSignature] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<ValidatorSignature>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorSignature> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<ValidatorSignature> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }

    // .types.LedgerInfo ledger_info = 2;


    pub fn get_ledger_info(&self) -> &LedgerInfo {
        self.ledger_info.as_ref().unwrap_or_else(|| LedgerInfo::default_instance())
    }
    pub fn clear_ledger_info(&mut self) {
        self.ledger_info.clear();
    }

    pub fn has_ledger_info(&self) -> bool {
        self.ledger_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info(&mut self, v: LedgerInfo) {
        self.ledger_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info(&mut self) -> &mut LedgerInfo {
        if self.ledger_info.is_none() {
            self.ledger_info.set_default();
        }
        self.ledger_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info(&mut self) -> LedgerInfo {
        self.ledger_info.take().unwrap_or_else(|| LedgerInfo::new())
    }
}

impl ::protobuf::Message for LedgerInfoWithSignatures {
    fn is_initialized(&self) -> bool {
        for v in &self.signatures {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ledger_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signatures)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.signatures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.ledger_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.signatures {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.ledger_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedgerInfoWithSignatures {
        LedgerInfoWithSignatures::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorSignature>>(
                    "signatures",
                    |m: &LedgerInfoWithSignatures| { &m.signatures },
                    |m: &mut LedgerInfoWithSignatures| { &mut m.signatures },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LedgerInfo>>(
                    "ledger_info",
                    |m: &LedgerInfoWithSignatures| { &m.ledger_info },
                    |m: &mut LedgerInfoWithSignatures| { &mut m.ledger_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LedgerInfoWithSignatures>(
                    "LedgerInfoWithSignatures",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LedgerInfoWithSignatures {
        static mut instance: ::protobuf::lazy::Lazy<LedgerInfoWithSignatures> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LedgerInfoWithSignatures,
        };
        unsafe {
            instance.get(LedgerInfoWithSignatures::new)
        }
    }
}

impl ::protobuf::Clear for LedgerInfoWithSignatures {
    fn clear(&mut self) {
        self.signatures.clear();
        self.ledger_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedgerInfoWithSignatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerInfoWithSignatures {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorSignature {
    // message fields
    pub validator_id: ::std::vec::Vec<u8>,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorSignature {
    fn default() -> &'a ValidatorSignature {
        <ValidatorSignature as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSignature {
    pub fn new() -> ValidatorSignature {
        ::std::default::Default::default()
    }

    // bytes validator_id = 1;


    pub fn get_validator_id(&self) -> &[u8] {
        &self.validator_id
    }
    pub fn clear_validator_id(&mut self) {
        self.validator_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.validator_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validator_id
    }

    // Take field
    pub fn take_validator_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validator_id, ::std::vec::Vec::new())
    }

    // bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ValidatorSignature {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validator_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.validator_id);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_id.is_empty() {
            os.write_bytes(1, &self.validator_id)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorSignature {
        ValidatorSignature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "validator_id",
                    |m: &ValidatorSignature| { &m.validator_id },
                    |m: &mut ValidatorSignature| { &mut m.validator_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &ValidatorSignature| { &m.signature },
                    |m: &mut ValidatorSignature| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ValidatorSignature>(
                    "ValidatorSignature",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ValidatorSignature {
        static mut instance: ::protobuf::lazy::Lazy<ValidatorSignature> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ValidatorSignature,
        };
        unsafe {
            instance.get(ValidatorSignature::new)
        }
    }
}

impl ::protobuf::Clear for ValidatorSignature {
    fn clear(&mut self) {
        self.validator_id.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSignature {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11ledger_info.proto\x12\x05types\"\x8c\x02\n\nLedgerInfo\x12\x18\n\
    \x07version\x18\x01\x20\x01(\x04R\x07version\x12@\n\x1ctransaction_accum\
    ulator_hash\x18\x02\x20\x01(\x0cR\x1atransactionAccumulatorHash\x12.\n\
    \x13consensus_data_hash\x18\x03\x20\x01(\x0cR\x11consensusDataHash\x12,\
    \n\x12consensus_block_id\x18\x04\x20\x01(\x0cR\x10consensusBlockId\x12\
    \x1b\n\tepoch_num\x18\x05\x20\x01(\x04R\x08epochNum\x12'\n\x0ftimestamp_\
    usecs\x18\x06\x20\x01(\x04R\x0etimestampUsecs\"\x89\x01\n\x18LedgerInfoW\
    ithSignatures\x129\n\nsignatures\x18\x01\x20\x03(\x0b2\x19.types.Validat\
    orSignatureR\nsignatures\x122\n\x0bledger_info\x18\x02\x20\x01(\x0b2\x11\
    .types.LedgerInfoR\nledgerInfo\"U\n\x12ValidatorSignature\x12!\n\x0cvali\
    dator_id\x18\x01\x20\x01(\x0cR\x0bvalidatorId\x12\x1c\n\tsignature\x18\
    \x02\x20\x01(\x0cR\tsignatureb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
