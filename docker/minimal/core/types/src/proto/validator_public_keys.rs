// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `validator_public_keys.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorPublicKeys {
    // message fields
    pub account_address: ::std::vec::Vec<u8>,
    pub consensus_public_key: ::std::vec::Vec<u8>,
    pub network_signing_public_key: ::std::vec::Vec<u8>,
    pub network_identity_public_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorPublicKeys {
    fn default() -> &'a ValidatorPublicKeys {
        <ValidatorPublicKeys as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorPublicKeys {
    pub fn new() -> ValidatorPublicKeys {
        ::std::default::Default::default()
    }

    // bytes account_address = 1;


    pub fn get_account_address(&self) -> &[u8] {
        &self.account_address
    }
    pub fn clear_account_address(&mut self) {
        self.account_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.account_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.account_address
    }

    // Take field
    pub fn take_account_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.account_address, ::std::vec::Vec::new())
    }

    // bytes consensus_public_key = 2;


    pub fn get_consensus_public_key(&self) -> &[u8] {
        &self.consensus_public_key
    }
    pub fn clear_consensus_public_key(&mut self) {
        self.consensus_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensus_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.consensus_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.consensus_public_key
    }

    // Take field
    pub fn take_consensus_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.consensus_public_key, ::std::vec::Vec::new())
    }

    // bytes network_signing_public_key = 3;


    pub fn get_network_signing_public_key(&self) -> &[u8] {
        &self.network_signing_public_key
    }
    pub fn clear_network_signing_public_key(&mut self) {
        self.network_signing_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_network_signing_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.network_signing_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_signing_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.network_signing_public_key
    }

    // Take field
    pub fn take_network_signing_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.network_signing_public_key, ::std::vec::Vec::new())
    }

    // bytes network_identity_public_key = 4;


    pub fn get_network_identity_public_key(&self) -> &[u8] {
        &self.network_identity_public_key
    }
    pub fn clear_network_identity_public_key(&mut self) {
        self.network_identity_public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_network_identity_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.network_identity_public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_identity_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.network_identity_public_key
    }

    // Take field
    pub fn take_network_identity_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.network_identity_public_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ValidatorPublicKeys {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.account_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.consensus_public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.network_signing_public_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.network_identity_public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.account_address);
        }
        if !self.consensus_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.consensus_public_key);
        }
        if !self.network_signing_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.network_signing_public_key);
        }
        if !self.network_identity_public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.network_identity_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.account_address.is_empty() {
            os.write_bytes(1, &self.account_address)?;
        }
        if !self.consensus_public_key.is_empty() {
            os.write_bytes(2, &self.consensus_public_key)?;
        }
        if !self.network_signing_public_key.is_empty() {
            os.write_bytes(3, &self.network_signing_public_key)?;
        }
        if !self.network_identity_public_key.is_empty() {
            os.write_bytes(4, &self.network_identity_public_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorPublicKeys {
        ValidatorPublicKeys::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "account_address",
                    |m: &ValidatorPublicKeys| { &m.account_address },
                    |m: &mut ValidatorPublicKeys| { &mut m.account_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "consensus_public_key",
                    |m: &ValidatorPublicKeys| { &m.consensus_public_key },
                    |m: &mut ValidatorPublicKeys| { &mut m.consensus_public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "network_signing_public_key",
                    |m: &ValidatorPublicKeys| { &m.network_signing_public_key },
                    |m: &mut ValidatorPublicKeys| { &mut m.network_signing_public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "network_identity_public_key",
                    |m: &ValidatorPublicKeys| { &m.network_identity_public_key },
                    |m: &mut ValidatorPublicKeys| { &mut m.network_identity_public_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ValidatorPublicKeys>(
                    "ValidatorPublicKeys",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ValidatorPublicKeys {
        static mut instance: ::protobuf::lazy::Lazy<ValidatorPublicKeys> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ValidatorPublicKeys,
        };
        unsafe {
            instance.get(ValidatorPublicKeys::new)
        }
    }
}

impl ::protobuf::Clear for ValidatorPublicKeys {
    fn clear(&mut self) {
        self.account_address.clear();
        self.consensus_public_key.clear();
        self.network_signing_public_key.clear();
        self.network_identity_public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorPublicKeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorPublicKeys {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bvalidator_public_keys.proto\x12\x05types\"\xec\x01\n\x13ValidatorP\
    ublicKeys\x12'\n\x0faccount_address\x18\x01\x20\x01(\x0cR\x0eaccountAddr\
    ess\x120\n\x14consensus_public_key\x18\x02\x20\x01(\x0cR\x12consensusPub\
    licKey\x12;\n\x1anetwork_signing_public_key\x18\x03\x20\x01(\x0cR\x17net\
    workSigningPublicKey\x12=\n\x1bnetwork_identity_public_key\x18\x04\x20\
    \x01(\x0cR\x18networkIdentityPublicKeyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
