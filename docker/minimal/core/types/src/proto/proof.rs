// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proof.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct AccumulatorProof {
    // message fields
    pub bitmap: u64,
    pub non_default_siblings: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccumulatorProof {
    fn default() -> &'a AccumulatorProof {
        <AccumulatorProof as ::protobuf::Message>::default_instance()
    }
}

impl AccumulatorProof {
    pub fn new() -> AccumulatorProof {
        ::std::default::Default::default()
    }

    // uint64 bitmap = 1;


    pub fn get_bitmap(&self) -> u64 {
        self.bitmap
    }
    pub fn clear_bitmap(&mut self) {
        self.bitmap = 0;
    }

    // Param is passed by value, moved
    pub fn set_bitmap(&mut self, v: u64) {
        self.bitmap = v;
    }

    // repeated bytes non_default_siblings = 2;


    pub fn get_non_default_siblings(&self) -> &[::std::vec::Vec<u8>] {
        &self.non_default_siblings
    }
    pub fn clear_non_default_siblings(&mut self) {
        self.non_default_siblings.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_default_siblings(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.non_default_siblings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_non_default_siblings(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.non_default_siblings
    }

    // Take field
    pub fn take_non_default_siblings(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.non_default_siblings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccumulatorProof {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bitmap = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.non_default_siblings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.bitmap != 0 {
            my_size += ::protobuf::rt::value_size(1, self.bitmap, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.non_default_siblings {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.bitmap != 0 {
            os.write_uint64(1, self.bitmap)?;
        }
        for v in &self.non_default_siblings {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccumulatorProof {
        AccumulatorProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "bitmap",
                    |m: &AccumulatorProof| { &m.bitmap },
                    |m: &mut AccumulatorProof| { &mut m.bitmap },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "non_default_siblings",
                    |m: &AccumulatorProof| { &m.non_default_siblings },
                    |m: &mut AccumulatorProof| { &mut m.non_default_siblings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccumulatorProof>(
                    "AccumulatorProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccumulatorProof {
        static mut instance: ::protobuf::lazy::Lazy<AccumulatorProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccumulatorProof,
        };
        unsafe {
            instance.get(AccumulatorProof::new)
        }
    }
}

impl ::protobuf::Clear for AccumulatorProof {
    fn clear(&mut self) {
        self.bitmap = 0;
        self.non_default_siblings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccumulatorProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccumulatorProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SparseMerkleProof {
    // message fields
    pub leaf: ::std::vec::Vec<u8>,
    pub bitmap: ::std::vec::Vec<u8>,
    pub non_default_siblings: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SparseMerkleProof {
    fn default() -> &'a SparseMerkleProof {
        <SparseMerkleProof as ::protobuf::Message>::default_instance()
    }
}

impl SparseMerkleProof {
    pub fn new() -> SparseMerkleProof {
        ::std::default::Default::default()
    }

    // bytes leaf = 1;


    pub fn get_leaf(&self) -> &[u8] {
        &self.leaf
    }
    pub fn clear_leaf(&mut self) {
        self.leaf.clear();
    }

    // Param is passed by value, moved
    pub fn set_leaf(&mut self, v: ::std::vec::Vec<u8>) {
        self.leaf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leaf(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.leaf
    }

    // Take field
    pub fn take_leaf(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.leaf, ::std::vec::Vec::new())
    }

    // bytes bitmap = 2;


    pub fn get_bitmap(&self) -> &[u8] {
        &self.bitmap
    }
    pub fn clear_bitmap(&mut self) {
        self.bitmap.clear();
    }

    // Param is passed by value, moved
    pub fn set_bitmap(&mut self, v: ::std::vec::Vec<u8>) {
        self.bitmap = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bitmap(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bitmap
    }

    // Take field
    pub fn take_bitmap(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bitmap, ::std::vec::Vec::new())
    }

    // repeated bytes non_default_siblings = 3;


    pub fn get_non_default_siblings(&self) -> &[::std::vec::Vec<u8>] {
        &self.non_default_siblings
    }
    pub fn clear_non_default_siblings(&mut self) {
        self.non_default_siblings.clear();
    }

    // Param is passed by value, moved
    pub fn set_non_default_siblings(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.non_default_siblings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_non_default_siblings(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.non_default_siblings
    }

    // Take field
    pub fn take_non_default_siblings(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.non_default_siblings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SparseMerkleProof {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.leaf)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bitmap)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.non_default_siblings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.leaf.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.leaf);
        }
        if !self.bitmap.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.bitmap);
        }
        for value in &self.non_default_siblings {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.leaf.is_empty() {
            os.write_bytes(1, &self.leaf)?;
        }
        if !self.bitmap.is_empty() {
            os.write_bytes(2, &self.bitmap)?;
        }
        for v in &self.non_default_siblings {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SparseMerkleProof {
        SparseMerkleProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "leaf",
                    |m: &SparseMerkleProof| { &m.leaf },
                    |m: &mut SparseMerkleProof| { &mut m.leaf },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bitmap",
                    |m: &SparseMerkleProof| { &m.bitmap },
                    |m: &mut SparseMerkleProof| { &mut m.bitmap },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "non_default_siblings",
                    |m: &SparseMerkleProof| { &m.non_default_siblings },
                    |m: &mut SparseMerkleProof| { &mut m.non_default_siblings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SparseMerkleProof>(
                    "SparseMerkleProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SparseMerkleProof {
        static mut instance: ::protobuf::lazy::Lazy<SparseMerkleProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SparseMerkleProof,
        };
        unsafe {
            instance.get(SparseMerkleProof::new)
        }
    }
}

impl ::protobuf::Clear for SparseMerkleProof {
    fn clear(&mut self) {
        self.leaf.clear();
        self.bitmap.clear();
        self.non_default_siblings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SparseMerkleProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SparseMerkleProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedTransactionProof {
    // message fields
    pub ledger_info_to_transaction_info_proof: ::protobuf::SingularPtrField<AccumulatorProof>,
    pub transaction_info: ::protobuf::SingularPtrField<super::transaction_info::TransactionInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignedTransactionProof {
    fn default() -> &'a SignedTransactionProof {
        <SignedTransactionProof as ::protobuf::Message>::default_instance()
    }
}

impl SignedTransactionProof {
    pub fn new() -> SignedTransactionProof {
        ::std::default::Default::default()
    }

    // .types.AccumulatorProof ledger_info_to_transaction_info_proof = 1;


    pub fn get_ledger_info_to_transaction_info_proof(&self) -> &AccumulatorProof {
        self.ledger_info_to_transaction_info_proof.as_ref().unwrap_or_else(|| AccumulatorProof::default_instance())
    }
    pub fn clear_ledger_info_to_transaction_info_proof(&mut self) {
        self.ledger_info_to_transaction_info_proof.clear();
    }

    pub fn has_ledger_info_to_transaction_info_proof(&self) -> bool {
        self.ledger_info_to_transaction_info_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_to_transaction_info_proof(&mut self, v: AccumulatorProof) {
        self.ledger_info_to_transaction_info_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_to_transaction_info_proof(&mut self) -> &mut AccumulatorProof {
        if self.ledger_info_to_transaction_info_proof.is_none() {
            self.ledger_info_to_transaction_info_proof.set_default();
        }
        self.ledger_info_to_transaction_info_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_to_transaction_info_proof(&mut self) -> AccumulatorProof {
        self.ledger_info_to_transaction_info_proof.take().unwrap_or_else(|| AccumulatorProof::new())
    }

    // .types.TransactionInfo transaction_info = 2;


    pub fn get_transaction_info(&self) -> &super::transaction_info::TransactionInfo {
        self.transaction_info.as_ref().unwrap_or_else(|| super::transaction_info::TransactionInfo::default_instance())
    }
    pub fn clear_transaction_info(&mut self) {
        self.transaction_info.clear();
    }

    pub fn has_transaction_info(&self) -> bool {
        self.transaction_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_info(&mut self, v: super::transaction_info::TransactionInfo) {
        self.transaction_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_info(&mut self) -> &mut super::transaction_info::TransactionInfo {
        if self.transaction_info.is_none() {
            self.transaction_info.set_default();
        }
        self.transaction_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_info(&mut self) -> super::transaction_info::TransactionInfo {
        self.transaction_info.take().unwrap_or_else(|| super::transaction_info::TransactionInfo::new())
    }
}

impl ::protobuf::Message for SignedTransactionProof {
    fn is_initialized(&self) -> bool {
        for v in &self.ledger_info_to_transaction_info_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_to_transaction_info_proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ledger_info_to_transaction_info_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transaction_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ledger_info_to_transaction_info_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transaction_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedTransactionProof {
        SignedTransactionProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccumulatorProof>>(
                    "ledger_info_to_transaction_info_proof",
                    |m: &SignedTransactionProof| { &m.ledger_info_to_transaction_info_proof },
                    |m: &mut SignedTransactionProof| { &mut m.ledger_info_to_transaction_info_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction_info::TransactionInfo>>(
                    "transaction_info",
                    |m: &SignedTransactionProof| { &m.transaction_info },
                    |m: &mut SignedTransactionProof| { &mut m.transaction_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedTransactionProof>(
                    "SignedTransactionProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedTransactionProof {
        static mut instance: ::protobuf::lazy::Lazy<SignedTransactionProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedTransactionProof,
        };
        unsafe {
            instance.get(SignedTransactionProof::new)
        }
    }
}

impl ::protobuf::Clear for SignedTransactionProof {
    fn clear(&mut self) {
        self.ledger_info_to_transaction_info_proof.clear();
        self.transaction_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedTransactionProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedTransactionProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountStateProof {
    // message fields
    pub ledger_info_to_transaction_info_proof: ::protobuf::SingularPtrField<AccumulatorProof>,
    pub transaction_info: ::protobuf::SingularPtrField<super::transaction_info::TransactionInfo>,
    pub transaction_info_to_account_proof: ::protobuf::SingularPtrField<SparseMerkleProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountStateProof {
    fn default() -> &'a AccountStateProof {
        <AccountStateProof as ::protobuf::Message>::default_instance()
    }
}

impl AccountStateProof {
    pub fn new() -> AccountStateProof {
        ::std::default::Default::default()
    }

    // .types.AccumulatorProof ledger_info_to_transaction_info_proof = 1;


    pub fn get_ledger_info_to_transaction_info_proof(&self) -> &AccumulatorProof {
        self.ledger_info_to_transaction_info_proof.as_ref().unwrap_or_else(|| AccumulatorProof::default_instance())
    }
    pub fn clear_ledger_info_to_transaction_info_proof(&mut self) {
        self.ledger_info_to_transaction_info_proof.clear();
    }

    pub fn has_ledger_info_to_transaction_info_proof(&self) -> bool {
        self.ledger_info_to_transaction_info_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_to_transaction_info_proof(&mut self, v: AccumulatorProof) {
        self.ledger_info_to_transaction_info_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_to_transaction_info_proof(&mut self) -> &mut AccumulatorProof {
        if self.ledger_info_to_transaction_info_proof.is_none() {
            self.ledger_info_to_transaction_info_proof.set_default();
        }
        self.ledger_info_to_transaction_info_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_to_transaction_info_proof(&mut self) -> AccumulatorProof {
        self.ledger_info_to_transaction_info_proof.take().unwrap_or_else(|| AccumulatorProof::new())
    }

    // .types.TransactionInfo transaction_info = 2;


    pub fn get_transaction_info(&self) -> &super::transaction_info::TransactionInfo {
        self.transaction_info.as_ref().unwrap_or_else(|| super::transaction_info::TransactionInfo::default_instance())
    }
    pub fn clear_transaction_info(&mut self) {
        self.transaction_info.clear();
    }

    pub fn has_transaction_info(&self) -> bool {
        self.transaction_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_info(&mut self, v: super::transaction_info::TransactionInfo) {
        self.transaction_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_info(&mut self) -> &mut super::transaction_info::TransactionInfo {
        if self.transaction_info.is_none() {
            self.transaction_info.set_default();
        }
        self.transaction_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_info(&mut self) -> super::transaction_info::TransactionInfo {
        self.transaction_info.take().unwrap_or_else(|| super::transaction_info::TransactionInfo::new())
    }

    // .types.SparseMerkleProof transaction_info_to_account_proof = 3;


    pub fn get_transaction_info_to_account_proof(&self) -> &SparseMerkleProof {
        self.transaction_info_to_account_proof.as_ref().unwrap_or_else(|| SparseMerkleProof::default_instance())
    }
    pub fn clear_transaction_info_to_account_proof(&mut self) {
        self.transaction_info_to_account_proof.clear();
    }

    pub fn has_transaction_info_to_account_proof(&self) -> bool {
        self.transaction_info_to_account_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_info_to_account_proof(&mut self, v: SparseMerkleProof) {
        self.transaction_info_to_account_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_info_to_account_proof(&mut self) -> &mut SparseMerkleProof {
        if self.transaction_info_to_account_proof.is_none() {
            self.transaction_info_to_account_proof.set_default();
        }
        self.transaction_info_to_account_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_info_to_account_proof(&mut self) -> SparseMerkleProof {
        self.transaction_info_to_account_proof.take().unwrap_or_else(|| SparseMerkleProof::new())
    }
}

impl ::protobuf::Message for AccountStateProof {
    fn is_initialized(&self) -> bool {
        for v in &self.ledger_info_to_transaction_info_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_info_to_account_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_to_transaction_info_proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_info)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_info_to_account_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ledger_info_to_transaction_info_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transaction_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transaction_info_to_account_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ledger_info_to_transaction_info_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transaction_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transaction_info_to_account_proof.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountStateProof {
        AccountStateProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccumulatorProof>>(
                    "ledger_info_to_transaction_info_proof",
                    |m: &AccountStateProof| { &m.ledger_info_to_transaction_info_proof },
                    |m: &mut AccountStateProof| { &mut m.ledger_info_to_transaction_info_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction_info::TransactionInfo>>(
                    "transaction_info",
                    |m: &AccountStateProof| { &m.transaction_info },
                    |m: &mut AccountStateProof| { &mut m.transaction_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SparseMerkleProof>>(
                    "transaction_info_to_account_proof",
                    |m: &AccountStateProof| { &m.transaction_info_to_account_proof },
                    |m: &mut AccountStateProof| { &mut m.transaction_info_to_account_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountStateProof>(
                    "AccountStateProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountStateProof {
        static mut instance: ::protobuf::lazy::Lazy<AccountStateProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountStateProof,
        };
        unsafe {
            instance.get(AccountStateProof::new)
        }
    }
}

impl ::protobuf::Clear for AccountStateProof {
    fn clear(&mut self) {
        self.ledger_info_to_transaction_info_proof.clear();
        self.transaction_info.clear();
        self.transaction_info_to_account_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountStateProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountStateProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventProof {
    // message fields
    pub ledger_info_to_transaction_info_proof: ::protobuf::SingularPtrField<AccumulatorProof>,
    pub transaction_info: ::protobuf::SingularPtrField<super::transaction_info::TransactionInfo>,
    pub transaction_info_to_event_proof: ::protobuf::SingularPtrField<AccumulatorProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventProof {
    fn default() -> &'a EventProof {
        <EventProof as ::protobuf::Message>::default_instance()
    }
}

impl EventProof {
    pub fn new() -> EventProof {
        ::std::default::Default::default()
    }

    // .types.AccumulatorProof ledger_info_to_transaction_info_proof = 1;


    pub fn get_ledger_info_to_transaction_info_proof(&self) -> &AccumulatorProof {
        self.ledger_info_to_transaction_info_proof.as_ref().unwrap_or_else(|| AccumulatorProof::default_instance())
    }
    pub fn clear_ledger_info_to_transaction_info_proof(&mut self) {
        self.ledger_info_to_transaction_info_proof.clear();
    }

    pub fn has_ledger_info_to_transaction_info_proof(&self) -> bool {
        self.ledger_info_to_transaction_info_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_to_transaction_info_proof(&mut self, v: AccumulatorProof) {
        self.ledger_info_to_transaction_info_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_to_transaction_info_proof(&mut self) -> &mut AccumulatorProof {
        if self.ledger_info_to_transaction_info_proof.is_none() {
            self.ledger_info_to_transaction_info_proof.set_default();
        }
        self.ledger_info_to_transaction_info_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_to_transaction_info_proof(&mut self) -> AccumulatorProof {
        self.ledger_info_to_transaction_info_proof.take().unwrap_or_else(|| AccumulatorProof::new())
    }

    // .types.TransactionInfo transaction_info = 2;


    pub fn get_transaction_info(&self) -> &super::transaction_info::TransactionInfo {
        self.transaction_info.as_ref().unwrap_or_else(|| super::transaction_info::TransactionInfo::default_instance())
    }
    pub fn clear_transaction_info(&mut self) {
        self.transaction_info.clear();
    }

    pub fn has_transaction_info(&self) -> bool {
        self.transaction_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_info(&mut self, v: super::transaction_info::TransactionInfo) {
        self.transaction_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_info(&mut self) -> &mut super::transaction_info::TransactionInfo {
        if self.transaction_info.is_none() {
            self.transaction_info.set_default();
        }
        self.transaction_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_info(&mut self) -> super::transaction_info::TransactionInfo {
        self.transaction_info.take().unwrap_or_else(|| super::transaction_info::TransactionInfo::new())
    }

    // .types.AccumulatorProof transaction_info_to_event_proof = 3;


    pub fn get_transaction_info_to_event_proof(&self) -> &AccumulatorProof {
        self.transaction_info_to_event_proof.as_ref().unwrap_or_else(|| AccumulatorProof::default_instance())
    }
    pub fn clear_transaction_info_to_event_proof(&mut self) {
        self.transaction_info_to_event_proof.clear();
    }

    pub fn has_transaction_info_to_event_proof(&self) -> bool {
        self.transaction_info_to_event_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_info_to_event_proof(&mut self, v: AccumulatorProof) {
        self.transaction_info_to_event_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_info_to_event_proof(&mut self) -> &mut AccumulatorProof {
        if self.transaction_info_to_event_proof.is_none() {
            self.transaction_info_to_event_proof.set_default();
        }
        self.transaction_info_to_event_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_info_to_event_proof(&mut self) -> AccumulatorProof {
        self.transaction_info_to_event_proof.take().unwrap_or_else(|| AccumulatorProof::new())
    }
}

impl ::protobuf::Message for EventProof {
    fn is_initialized(&self) -> bool {
        for v in &self.ledger_info_to_transaction_info_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_info_to_event_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_to_transaction_info_proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_info)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_info_to_event_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ledger_info_to_transaction_info_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transaction_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transaction_info_to_event_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ledger_info_to_transaction_info_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transaction_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transaction_info_to_event_proof.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventProof {
        EventProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccumulatorProof>>(
                    "ledger_info_to_transaction_info_proof",
                    |m: &EventProof| { &m.ledger_info_to_transaction_info_proof },
                    |m: &mut EventProof| { &mut m.ledger_info_to_transaction_info_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction_info::TransactionInfo>>(
                    "transaction_info",
                    |m: &EventProof| { &m.transaction_info },
                    |m: &mut EventProof| { &mut m.transaction_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccumulatorProof>>(
                    "transaction_info_to_event_proof",
                    |m: &EventProof| { &m.transaction_info_to_event_proof },
                    |m: &mut EventProof| { &mut m.transaction_info_to_event_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EventProof>(
                    "EventProof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EventProof {
        static mut instance: ::protobuf::lazy::Lazy<EventProof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EventProof,
        };
        unsafe {
            instance.get(EventProof::new)
        }
    }
}

impl ::protobuf::Clear for EventProof {
    fn clear(&mut self) {
        self.ledger_info_to_transaction_info_proof.clear();
        self.transaction_info.clear();
        self.transaction_info_to_event_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventProof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bproof.proto\x12\x05types\x1a\x16transaction_info.proto\"\\\n\x10Ac\
    cumulatorProof\x12\x16\n\x06bitmap\x18\x01\x20\x01(\x04R\x06bitmap\x120\
    \n\x14non_default_siblings\x18\x02\x20\x03(\x0cR\x12nonDefaultSiblings\"\
    q\n\x11SparseMerkleProof\x12\x12\n\x04leaf\x18\x01\x20\x01(\x0cR\x04leaf\
    \x12\x16\n\x06bitmap\x18\x02\x20\x01(\x0cR\x06bitmap\x120\n\x14non_defau\
    lt_siblings\x18\x03\x20\x03(\x0cR\x12nonDefaultSiblings\"\xc5\x01\n\x16S\
    ignedTransactionProof\x12h\n%ledger_info_to_transaction_info_proof\x18\
    \x01\x20\x01(\x0b2\x17.types.AccumulatorProofR\x20ledgerInfoToTransactio\
    nInfoProof\x12A\n\x10transaction_info\x18\x02\x20\x01(\x0b2\x16.types.Tr\
    ansactionInfoR\x0ftransactionInfo\"\xa4\x02\n\x11AccountStateProof\x12h\
    \n%ledger_info_to_transaction_info_proof\x18\x01\x20\x01(\x0b2\x17.types\
    .AccumulatorProofR\x20ledgerInfoToTransactionInfoProof\x12A\n\x10transac\
    tion_info\x18\x02\x20\x01(\x0b2\x16.types.TransactionInfoR\x0ftransactio\
    nInfo\x12b\n!transaction_info_to_account_proof\x18\x03\x20\x01(\x0b2\x18\
    .types.SparseMerkleProofR\x1dtransactionInfoToAccountProof\"\x98\x02\n\n\
    EventProof\x12h\n%ledger_info_to_transaction_info_proof\x18\x01\x20\x01(\
    \x0b2\x17.types.AccumulatorProofR\x20ledgerInfoToTransactionInfoProof\
    \x12A\n\x10transaction_info\x18\x02\x20\x01(\x0b2\x16.types.TransactionI\
    nfoR\x0ftransactionInfo\x12]\n\x1ftransaction_info_to_event_proof\x18\
    \x03\x20\x01(\x0b2\x17.types.AccumulatorProofR\x1btransactionInfoToEvent\
    Proofb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
