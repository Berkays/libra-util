modules:
module Token {
    resource T {balance: u64}

    public new(balance: u64): R#Self.T  {
        return T{balance: copy(balance)};
    }

    public value(this: &R#Self.T): u64 {
        let b: u64;
        let b_ref: &u64;
        b_ref = &move(this).balance;
        b = *move(b_ref);
        return move(b);
    }

    public bump(this: &mut R#Self.T) {
        let val: &mut u64;
        let x: u64;
        val = &mut move(this).balance;
        x = *copy(val) + 1;
        *move(val) = copy(x);
        return;
    }

    public get(addr: address): &mut R#Self.T {
        let t_ref: &mut R#Self.T;
        t_ref = borrow_global<T>(move(addr));
        return move(t_ref);
    }

    public publish(t: R#Self.T) {
        move_to_sender<T>(move(t));
        return;
    }
}

script:
import Transaction.Token;
main() {
    let z: R#Token.T;
    let addr1: address;
    let struct1: &mut R#Token.T;
    let imm_struct1: &R#Token.T;
    let struct1_original_balance: u64;
    let struct1_new_balance: u64;

    z = Token.new(0);
    Token.publish(move(z));

    addr1 = get_txn_sender();
    struct1 = Token.get(copy(addr1));

    imm_struct1 = freeze(copy(struct1));
    struct1_original_balance = Token.value(move(imm_struct1));
    assert(copy(struct1_original_balance) == 0, 42);

    Token.bump(copy(struct1));

    imm_struct1 = freeze(move(struct1));
    struct1_new_balance = Token.value(move(imm_struct1));
    assert(copy(struct1_new_balance) == 1, 42);

    return;
}